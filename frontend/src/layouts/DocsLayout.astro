---
import "../styles/tailwind.css"
import { getCollection } from "astro:content"

export interface Props {
	title: string
	description?: string
}

const { title, description } = Astro.props

// Get all docs and organize by category
const allDocs = await getCollection("docs", ({ data }) => {
	return data.draft !== true
})

// Group by category and sort by order
const docsByCategory = {
	introduccion: allDocs
		.filter((doc) => doc.data.category === "introduccion")
		.sort((a, b) => a.data.order - b.data.order),
	proceso: allDocs
		.filter((doc) => doc.data.category === "proceso")
		.sort((a, b) => a.data.order - b.data.order),
	transparencia: allDocs
		.filter((doc) => doc.data.category === "transparencia")
		.sort((a, b) => a.data.order - b.data.order),
	referencias: allDocs
		.filter((doc) => doc.data.category === "referencias")
		.sort((a, b) => a.data.order - b.data.order),
}

const categoryNames = {
	introduccion: "Introducción",
	proceso: "Proceso",
	transparencia: "Transparencia",
	referencias: "Referencias",
}
---

<!doctype html>
<html lang="es">
	<head>
		<meta charset="UTF-8" />
		<meta name="viewport" content="width=device-width, initial-scale=1.0" />
		<link rel="icon" type="image/svg+xml" href="/favicon.svg" />
		<meta name="generator" content={Astro.generator} />
		<meta
			name="description"
			content={description ||
				"Documentación de Votómetro - Proceso de desarrollo, talleres y metodología"}
		/>
		<title>{title} - Votómetro</title>
	</head>
	<body class="antialiased bg-white text-text-primary">
		<!-- Fixed Header -->
		<header
			class="fixed top-0 left-0 right-0 z-50 h-16 bg-white border-b border-gray-200"
		>
			<div class="h-full px-6 flex items-center justify-between">
				<a href="/" class="text-xl font-bold text-text-primary"
					>Votómetro</a
				>
				<a
					href="/elecciones-generales-2026"
					class="bg-black text-white font-medium text-sm px-4 py-2 rounded-lg hover:bg-gray-800 transition-colors"
				>
					Empezar
				</a>
			</div>
		</header>

		<!-- Mobile Menu Button -->
		<button
			id="mobile-sidebar-toggle"
			class="fixed bottom-6 right-6 z-50 lg:hidden w-14 h-14 bg-black text-white rounded-full shadow-lg flex items-center justify-center hover:bg-gray-800 transition-colors"
			aria-label="Toggle menu"
		>
			<svg
				class="w-6 h-6"
				fill="none"
				stroke="currentColor"
				viewBox="0 0 24 24"
			>
				<path
					stroke-linecap="round"
					stroke-linejoin="round"
					stroke-width="2"
					d="M4 6h16M4 12h16M4 18h16"></path>
			</svg>
		</button>

		<!-- Layout Container -->
		<div class="flex pt-16 min-h-screen">
			<!-- Left Sidebar Navigation -->
			<aside
				id="sidebar"
				class="fixed top-16 left-0 bottom-0 w-64 bg-gray-50 border-r border-gray-200 overflow-y-auto transform -translate-x-full lg:translate-x-0 transition-transform duration-300 z-40 pb-8"
			>
				<nav class="p-6 pb-24">
					<div class="space-y-6">
						{
							Object.entries(docsByCategory).map(
								([category, docs]) => (
									<div>
										<h3 class="text-xs font-bold text-gray-500 uppercase tracking-wider mb-3">
											{
												categoryNames[
													category as keyof typeof categoryNames
												]
											}
										</h3>
										<ul class="space-y-2">
											{docs.map((doc) => (
												<li>
													<a
														href={`/documentacion/${doc.slug}`}
														class="block text-sm text-text-secondary hover:text-text-primary transition-colors py-1"
													>
														{doc.data.title}
													</a>
												</li>
											))}
										</ul>
									</div>
								),
							)
						}
					</div>
				</nav>
			</aside>

			<!-- Main Content -->
			<main class="flex-1 lg:ml-64 xl:mr-64">
				<div class="max-w-4xl mx-auto px-6 py-12">
					<slot />
				</div>
			</main>

			<!-- Right Table of Contents -->
			<aside
				class="hidden xl:block fixed top-16 right-0 bottom-0 w-64 overflow-y-auto border-l border-gray-200 bg-white pb-8"
			>
				<nav class="p-6 pb-24">
					<h3
						class="text-xs font-bold text-gray-500 uppercase tracking-wider mb-4"
					>
						En esta página
					</h3>
					<ul id="toc" class="space-y-2 text-sm">
						<!-- Table of contents will be generated by JavaScript -->
					</ul>
				</nav>
			</aside>
		</div>

		<!-- Sidebar Overlay for Mobile -->
		<div
			id="sidebar-overlay"
			class="fixed inset-0 backdrop-blur-sm bg-black/20 z-30 hidden lg:hidden"
		>
		</div>

		<script>
			// Mobile sidebar toggle
			const sidebarToggle = document.getElementById(
				"mobile-sidebar-toggle",
			)
			const sidebar = document.getElementById("sidebar")
			const sidebarOverlay = document.getElementById("sidebar-overlay")

			function toggleSidebar() {
				sidebar?.classList.toggle("-translate-x-full")
				sidebarOverlay?.classList.toggle("hidden")
			}

			sidebarToggle?.addEventListener("click", toggleSidebar)
			sidebarOverlay?.addEventListener("click", toggleSidebar)

			// Auto-generate table of contents from h2 headings
			const content = document.querySelector("main")
			const toc = document.getElementById("toc")

			if (content && toc) {
				const headings = content.querySelectorAll("h2[id]")
				headings.forEach((heading) => {
					const li = document.createElement("li")
					const a = document.createElement("a")
					a.href = `#${heading.id}`
					a.textContent = heading.textContent
					a.className =
						"block text-text-secondary hover:text-text-primary transition-colors py-1 border-l-2 border-transparent hover:border-primary pl-3 -ml-3"
					li.appendChild(a)
					toc.appendChild(li)
				})
			}

			// Highlight active section in TOC on scroll
			const observerOptions = {
				rootMargin: "-100px 0px -66%",
				threshold: 0,
			}

			const observer = new IntersectionObserver((entries) => {
				entries.forEach((entry) => {
					const id = entry.target.getAttribute("id")
					const tocLink = document.querySelector(
						`#toc a[href="#${id}"]`,
					)
					if (entry.isIntersecting) {
						// Remove active class from all links
						document.querySelectorAll("#toc a").forEach((link) => {
							link.classList.remove(
								"border-primary",
								"text-text-primary",
								"font-medium",
							)
							link.classList.add("border-transparent")
						})
						// Add active class to current link
						if (tocLink) {
							tocLink.classList.remove("border-transparent")
							tocLink.classList.add(
								"border-primary",
								"text-text-primary",
								"font-medium",
							)
						}
					}
				})
			}, observerOptions)

			// Observe all h2 headings
			document.querySelectorAll("main h2[id]").forEach((heading) => {
				observer.observe(heading)
			})

			// Smooth scroll for anchor links
			document.querySelectorAll('a[href^="#"]').forEach((anchor) => {
				anchor.addEventListener("click", function (e: Event) {
					e.preventDefault()
					const targetId = (
						e.currentTarget as HTMLAnchorElement
					).getAttribute("href")
					if (targetId && targetId !== "#") {
						const target = document.querySelector(targetId)
						if (target) {
							target.scrollIntoView({
								behavior: "smooth",
								block: "start",
							})
							// Update URL
							history.pushState(null, "", targetId)
						}
					}
				})
			})
		</script>
	</body>
</html>
